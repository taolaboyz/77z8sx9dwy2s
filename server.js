const express = require("express");
const axios = require("axios");
const cors = require("cors");

const app = express();
app.use(cors());

const PORT = process.env.PORT || 4000;

// ===== BI·∫æN TO√ÄN C·ª§C =====
let lastData = null;
let history = []; // l∆∞u {phien, du_doan, dudoan_vi, ket_qua, danh_gia}
let tongDung = 0;
let tongSai = 0;

/* ===== H√ÄM ƒê·∫¢O D·ª∞ ƒêO√ÅN ===== */
function reversePrediction(prediction) {
  if (!prediction || typeof prediction !== "string") return "";
  const p = prediction.trim();

  if (p === "T√†i") return "X·ªâu";
  if (p === "X·ªâu") return "T√†i";
  if (p === "Ch·∫µn") return "L·∫ª";
  if (p === "L·∫ª") return "Ch·∫µn";
  return p;
}

/* ===== H√ÄM ƒê·∫¢O V·ªä (d·ª±a v√†o dudoan_vi g·ªëc) ===== */
function reversePositions(prediction, originalPositions) {
  if (!Array.isArray(originalPositions)) return [];

  if (prediction === "T√†i") {
    // Ng∆∞·ª£c l·∫°i l√† X·ªâu ‚Üí l·ªçc s·ªë <= 10
    const xi = originalPositions.filter(n => n <= 10);
    return xi.sort((a, b) => b - a).slice(0, 3); // 3 s·ªë l·ªõn nh·∫•t <=10
  }
  if (prediction === "X·ªâu") {
    // Ng∆∞·ª£c l·∫°i l√† T√†i ‚Üí l·ªçc s·ªë >= 11
    const tai = originalPositions.filter(n => n >= 11);
    return tai.sort((a, b) => a - b).slice(0, 3); // 3 s·ªë nh·ªè nh·∫•t >=11
  }
  return [];
}

/* ===== G·ªåI API G·ªêC ===== */
async function fetchSicboSunWin() {
  try {
    const res = await axios.get("https://sicokk.onrender.com/predict");
    const data = res.data;

    // Chu·∫©n h√≥a d·ªØ li·ªáu
    const current = {
      Phien: data.Phien,
      Xuc_xac_1: data.Xuc_xac_1,
      Xuc_xac_2: data.Xuc_xac_2,
      Xuc_xac_3: data.Xuc_xac_3,
      Tong: data.Tong,
      Ket_qua: data.Ket_qua,
      du_doan: reversePrediction(data.du_doan),             // ƒë·∫£o ng∆∞·ª£c
      dudoan_vi: reversePositions(data.du_doan, data.dudoan_vi), // 3 s·ªë kh·∫£ nƒÉng cao
      do_tin_cay: data.do_tin_cay,
      phien_hien_tai: data.phien_hien_tai,
      Ghi_chu: data.Ghi_chu,
      id: "@LostmyS4lf"
    };

    // N·∫øu c√≥ phi√™n m·ªõi
    if (!lastData || current.Phien !== lastData.Phien) {
      if (lastData) {
        // ƒê√°nh gi√° ƒë√∫ng/sai d·ª± ƒëo√°n c·ªßa phi√™n tr∆∞·ªõc
        const danh_gia =
          lastData.du_doan === current.Ket_qua ? "ƒê√öNG" : "SAI";

        if (danh_gia === "ƒê√öNG") tongDung++;
        else tongSai++;

        history.unshift({
          phien: lastData.Phien,
          du_doan: lastData.du_doan,
          dudoan_vi: lastData.dudoan_vi,
          ket_qua: current.Ket_qua,
          danh_gia
        });

        if (history.length > 50) history.pop();
      }
      lastData = current;
    }
  } catch (err) {
    console.error("‚ùå L·ªói fetch API SicboSunWin:", err.message);
  }
}

// G·ªçi API li√™n t·ª•c 5s/l·∫ßn
setInterval(fetchSicboSunWin, 5000);
fetchSicboSunWin();

/* ===== ROUTES ===== */

// API cho frontend
app.get("/sicbosunwin/apisex", (req, res) => {
  if (!lastData) return res.json({ error: "Ch∆∞a c√≥ d·ªØ li·ªáu" });

  res.json({
    Phien: lastData.Phien,
    Xuc_xac_1: lastData.Xuc_xac_1,
    Xuc_xac_2: lastData.Xuc_xac_2,
    Xuc_xac_3: lastData.Xuc_xac_3,
    Tong: lastData.Tong,
    Ket_qua: lastData.Ket_qua,
    du_doan: lastData.du_doan,
    dudoan_vi: lastData.dudoan_vi,
    do_tin_cay: lastData.do_tin_cay,
    tong_dung: tongDung,
    tong_sai: tongSai
  });
});

// API tr·∫£ v·ªÅ l·ªãch s·ª≠
app.get("/sicbosunwin/historysex", (req, res) => {
  res.json(history);
});

// ===== START SERVER =====
app.listen(PORT, () => {
  console.log(`üöÄ Server SicboSunWin ch·∫°y t·∫°i http://localhost:${PORT}`);
});
